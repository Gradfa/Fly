-- FlyModule.lua
local FlyModule = {}
FlyModule.FlySpeed = 10
FlyModule.Flying = false

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local runService = game:GetService("RunService")
local uis = game:GetService("UserInputService")

local bodyVelocity
local connection

function FlyModule:SetSpeed(speed)
    self.FlySpeed = speed
    if bodyVelocity then
        bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    end
end

function FlyModule:Start()
    if self.Flying then return end
    self.Flying = true
    
    if not bodyVelocity then
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = character.HumanoidRootPart
    end
    
    connection = runService.RenderStepped:Connect(function()
        if not self.Flying then return end
        
        local moveDirection = Vector3.new()
        if uis:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + workspace.CurrentCamera.CFrame.LookVector
        end
        if uis:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - workspace.CurrentCamera.CFrame.LookVector
        end
        if uis:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - workspace.CurrentCamera.CFrame.RightVector
        end
        if uis:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + workspace.CurrentCamera.CFrame.RightVector
        end
        if uis:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + Vector3.new(0, 1, 0)
        end
        if uis:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection = moveDirection - Vector3.new(0, 1, 0)
        end
        
        moveDirection = moveDirection.Unit
        if moveDirection.Magnitude == 0 then
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        else
            bodyVelocity.Velocity = moveDirection * self.FlySpeed
        end
    end)
end

function FlyModule:Stop()
    if not self.Flying then return end
    self.Flying = false
    if connection then
        connection:Disconnect()
        connection = nil
    end
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
end

return FlyModule
